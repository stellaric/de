//variable 
var currentPlayer = 1;
var diceNumber;
var diceElement;
var player1Element;
var player2Element;
var roundScoreElement
    // Fonction de lancer de dé
function launchDice() {
    // Génération d'un nombre aléatoire entre 1 et 6
    diceNumber = Math.floor(Math.random() * 6) + 1;

    // Sélection de l'élément d'affichage du dé
    diceElement = document.querySelector('.score img');

    // Mise à jour de l'image du dé en fonction du résultat
    diceElement.src = '../src/img/dice/de' + diceNumber + '.png';

    // Si le résultat est différent de 1, on met à jour le score temporaire du joueur actif
    if (diceNumber !== 1) {
        updateRoundScore(diceNumber);
    } else {
        // Sinon, on passe au joueur suivant
        switchPlayer();
    }
    // Ajouter la classe "bounce-animation" au dé
    var diceSound = document.getElementById("diceSound");
    diceSound.play();
    // Arrêter le son après 1 seconde
    setTimeout(function() {
        diceSound.pause();
    }, 1000);


    diceElement = document.getElementById("dice");
    diceElement.classList.add("bounce-animation");

    // Supprimer la classe "bounce-animation" après un court délai
    setTimeout(function() {
        diceElement.classList.remove("bounce-animation");
    }, 500); // Durée de l'animation en millisecondes

}

// Fonction de mise à jour du score temporaire du joueur actif
function updateRoundScore(diceNumber) {
    // Sélection de l'élément d'affichage du score temporaire du joueur actif
    roundScoreElement = document.querySelector('.joueur_un.active #roundScore1');

    // Récupération du score temporaire actuel du joueur actif
    var roundScore = parseInt(roundScoreElement.textContent);

    // Mise à jour du score temporaire en ajoutant le résultat du lancer de dé
    roundScore += diceNumber;

    // Mise à jour de l'affichage du score temporaire
    roundScoreElement.textContent = roundScore;
}

// Fonction  joueur suivant
function switchPlayer() {
    // Sélection des éléments des joueurs
    player1Element = document.querySelector('.joueur_un');
    player2Element = document.querySelector('.joueur_deux');
    roundScoreElement = document.getElementById("roundScore" + currentPlayer);

    player1Element.classList.toggle("active");
    player2Element.classList.toggle("active");

    roundScore = 0;
    roundScoreElement.textContent = roundScore;

    if (currentPlayer === 1) {
        currentPlayer = 2;
    } else {
        currentPlayer = 1;
    }
}










// vue.contact
function validateForm(event) {
    event.preventDefault(); // Empêche le rechargement de la page lors de la soumission du formulaire

    // Récupérer les valeurs des champs du formulaire
    const nom = document.getElementById('nom').value;
    const prenom = document.getElementById('prenom').value;
    const email = document.getElementById('email').value;
    const sujet = document.getElementById('sujet').value;
    const message = document.getElementById('message').value;

    // Expression régulière pour vérifier le format de l'email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    // Vérifier les valeurs des champs avec les regex
    if (nom.trim() === '' || prenom.trim() === '' || email.trim() === '' || sujet.trim() === '' || message.trim() === '') {
        alert('Veuillez remplir tous les champs du formulaire.');
    } else if (!emailRegex.test(email)) {
        alert('Veuillez entrer une adresse email valide.');
    } else {
        // Si toutes les validations sont réussies, vous pouvez envoyer les données du formulaire
        alert('Formulaire envoyé avec succès!');
        document.getElementById('contactForm').reset(); // Réinitialiser le formulaire après l'envoi
    }
}


// Ajout des écouteurs d'événements aux boutons
document.getElementById('rollBtn').addEventListener('click', launchDice);
document.getElementById('holdBtn').addEventListener('click', switchPlayer);